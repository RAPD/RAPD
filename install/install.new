#!/bin/bash

# This file is part of RAPD

# Copyright (C) 2016-2023, Cornell University
# All rights reserved.

# RAPD is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3.

# RAPD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

__created__="2022-12-01"
__maintainer__="Frank Murphy"
__email__="fvm3@cornell.edu"
__status__="Development"

INSTALL_DIR=$(cd $(dirname $0); pwd)
THIS_FILE=$(basename $0)
PREFIX=`echo $INSTALL_DIR | sed -e "s%/install%%"`
RAPD_VERSION=$(grep RAPD_VERSION $INSTALL_DIR/../src/version.py | cut -d'"' -f2)
CCTBXPYTHON=$(which cctbx.python)
BIN_DIR=$PREFIX"/bin"
SRC_DIR=$PREFIX"/src/"
# ROOT_DIR=$(cd $INSTALL_DIR/..; pwd)

INSTALL_INIT=1
INSTALL_PYTHON=1
INSTALL_SCRIPTS=1
DEBUG=0
FORCE=0
VERBOSE=0

# Handle command line
while getopts "dfhv" x; do
    case "$x" in
        h)
            echo "usage: $0 [options]

Installs RAPD v$RAPD_VERSION
    -d           debug
    -f           no error if install prefix already exists
    -v           verbose
"
            exit 0
            ;;

        d)
            DEBUG=1
            ;;
        
        f)
            FORCE=1
            ;;

        v)
            VERBOSE=1
            ;;

        ?)
            printf "\033[91mError: did not recognize option, please try -h\033[0m\n"
            exit 1
            ;;
    esac
done

# Debug printing
if [ $DEBUG == 1 ]; then
  echo ""
  echo "RAPD_VERSION $RAPD_VERSION"
  echo "INSTALL_DIR  $INSTALL_DIR"
  echo "BIN_DIR      $BIN_DIR"
  echo "SRC_DIR      $SRC_DIR"
  echo "THIS_FILE    $THIS_FILE"
  echo "PREFIX       $PREFIX"
  echo "CCTBXPYTHON  $CCTBXPYTHON"
  echo ""
  echo "INSTALL_INIT    $INSTALL_INIT"
  echo "INSTALL_PYTHON  $INSTALL_PYTHON"
  echo "INSTALL_SCRIPTS $INSTALL_SCRIPTS"
  echo ""
  echo "DEBUG           $DEBUG"
  echo "FORCE           $FORCE"
  echo "VERBOSE         $VERBOSE"
  echo ""
fi

printf "RAPD2 will be installed into: $PREFIX
  - Press ENTER to confirm the location or
    enter another destination
  - Enter q abort the installation

[$PREFIX] >>> "
read user_prefix
if [[ $user_prefix == "q" ]]; then
  printf "Exiting.\n"
  exit 0
fi
if [[ $user_prefix == "" ]]; then
  user_prefix=$PREFIX
fi
if [[ ! -d "$user_prefix" ]]; then
  printf "Directory $user_prefix does not exist\n"
  printf "Exiting \n"
  exit 9
fi

PREFIX=$user_prefix
printf "Installing in $PREFIX \n"


if [ $INSTALL_PYTHON == 1 ]; then
 
  # Create the bin directory
  if [ ! -d $BIN_DIR ]
  then
    mkdir $BIN_DIR
  fi
  cd $BIN_DIR

  # Create rapd.python
  printf "  Creating rapd.python\n"
  if [[ ! -e "$CCTBXPYTHON" ]]; then
    printf "\033[91mERROR: cctbx.python not present\n"
    printf "This is a reequireement to install & run rapd2\033[0m\n"
    exit 9
  fi

  # shellrealpath from cctbx.python
  # ----------------------------------------------------------------------------
  # The shellrealpath function resolves an absolute physical path of its
  # first argument and stores it in a global shell variable RESULT.
  # The function returns nonzero for unreadable or invalid symlinks
  # and resets the RESULT to an empty string.
  shellrealpath() {
      local ORGDIR="$PWD"
      local TARGET="$1"
      RESULT=""
      # This test fails for a symlink loop.  We can do without resolution
      # of symlinks that point to existing unreadable files.
      [ -r "$TARGET" ] || return $?
      # Check if the readlink command exists.
      type readlink >/dev/null || return $?
      while true; do
          cd "$(dirname "$TARGET")"
          TARGET="$(basename "$TARGET")"
          if [ -L "$TARGET" ]; then
              TARGET="$(readlink "$TARGET")"
              continue
          fi
          RESULT="$(pwd -P)/$TARGET"
          break
      done
      cd "$ORGDIR"
  }
  MY_LIBTBX_PREFIX="$(shellrealpath "$CCTBXPYTHON" && cd "$(dirname "$RESULT")/.." && pwd)"
  sed -e 's/cctbx.python/rapd.python/' \
      -e "s,LIBTBX_PREFIX=.*,LIBTBX_PREFIX=$MY_LIBTBX_PREFIX," \
      -e '/export LIBTBX_PYEXE/a\'$'\n''export PYTHONPATH="/Users/fmurphy/workspace/rapd/src:${PATH}"' \
      $CCTBXPYTHON > ./rapd.python
  chmod +x rapd.python

  cd $INSTALL_DIR

  # Modules
  printf "  Installing python modules needed by RAPD\n"

  if [ $VERBOSE == 1 ]; then
    pip install -vr requirements.txt
  else
    pip install -r requirements.txt
  fi

  # rapd.pip install crypto
  # if [[ $PLATFORM == "Darwin" ]]; then
  #   rapd.pip install pyopenssl
  # fi
  # rapd.pip install pycrypto
  # rapd.pip install ndg-httpsclient #includes pyopenssl, cffi, and cryptography
  # rapd.pip install pyasn1
  # rapd.pip install redis
  # rapd.pip install pymysql
  # rapd.pip install pymongo
  # rapd.pip install drmaa
  # rapd.pip install paramiko
  # rapd.pip install fabio
  # # rapd.pip install scipy
  # rapd.pip install mysolr
  # # Get the up arrow working in the CLI
  # if [[ $PLATFORM == "Linux" ]]; then
  #   if [[ $LINUX_FLAVOR == "CentOS" ]]; then
  #     if [[ $CENTOS_VERSION_MAJOR == "7" ]]; then
  #       if [ ! -e /lib64/libncurses.so ]; then
  #         if [ "$EUID" -ne 0 ]; then
  #           printf "\033[31mreadline python module needs /lib64/libncurses.so\n \033[0m"
  #           printf "\033[31mYou can enable readline with the following commands\n\033[0m"
  #           printf "  > ln -s /lib64/libncurses.so.5 /lib64/libncurses.so\n"
  #           printf "  > rapd.pip install readline\n"
  #         else
  #           printf "  Making libncurses softlink to enable readline"
  #           ln -s /lib64/libncurses.so.5 /lib64/libncurses.so
  #           rapd.pip install readline
  #         fi
  #       else
  #         rapd.pip install readline
  #       fi
  #     else
  #       rapd.pip install readline
  #     fi
  #   else
  #     rapd.pip install readline
  #   fi
  # else
  #   rapd.pip install readline
  # fi

  cd $INSTALL_DIR
  printf "\033[92mRAPD python module install complete.\033[0m\n"
fi


if [ $INSTALL_INIT == 1 ]; then
  printf "\n\033[94mInstalling initialization scripts \033[0m\n"

  # Create the rapd.shrc script
  printf "  Creating rapd.shrc\n"
  cd $PREFIX
  if [[ -e $PREFIX"/rapd.shrc" ]]; then
    rm $PREFIX"/rapd.shrc"
  fi
  echo "# $PREFIX/rapd.shrc -- bash initialization script for RAPD2" > rapd.shrc
  echo "#" >> rapd.shrc
  echo "# (c) Copyright 2009-2023, Cornell University" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "# Add rapd bin to the path" >> rapd.shrc
  echo "PATH=$BIN_DIR:\$PATH" >> rapd.shrc
  echo "export PATH" >> rapd.shrc
  echo "# Set environmental variable" >> rapd.shrc
  echo "RAPD_HOME=$PREFIX" >> rapd.shrc
  echo "export RAPD_HOME" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.shrc
  echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo''" >> rapd.shrc

  # Create the rapd.cshrc script
  printf "  Creating rapd.cshrc\n"
  cd $PREFIX
  if [[ -e $PREFIX"/rapd.cshrc" ]]; then
    rm $PREFIX"/rapd.cshrc"
  fi
  echo "# $PREFIX/rapd.cshrc -- bash initialization script for RAPD2" > rapd.cshrc
  echo "#" >> rapd.cshrc
  echo "# (c) Copyright 2009-2023, Cornell University" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "# Add rapd bin to the path" >> rapd.cshrc
  echo "setenv PATH $BIN_DIR:\$PATH" >> rapd.cshrc
  echo "# Set environmental variable" >> rapd.cshrc
  echo "setenv RAPD_HOME $PREFIX" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.cshrc
  echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo''" >> rapd.cshrc

  cd $INSTALL_DIR
  printf "\033[92mRAPD initialization scripts install complete.\033[0m\n"
fi


if [ $INSTALL_SCRIPTS == 1 ]; then
  printf "\n\033[94mInstalling RAPD executable scripts\033[0m\n"

  # Create the bin directory
  if [ ! -d $BIN_DIR ]
  then
    mkdir $BIN_DIR
  fi

  # Create scripts
  RAPD_HOME=$PREFIX
  export RAPD_HOME
  cd $INSTALL_DIR
  ./create_min_scripts.sh
  ./create_scripts.sh

  printf "\033[92mRAPD executable scripts install complete.\033[0m\n"
fi


if [ $INSTALL_INIT == 1 ]; then

  printf "\n=====================================================================\n"
  printf "=  To initialize RAPD \n"
  printf "= \n"
  printf "=  sh and bash users: \n"
  printf "=    source $PREFIX/rapd.shrc \n"
  printf "=  You may want to add this line to your .profile or .bashrc file \n"
  printf "= \n"
  printf "=  csh and tcsh users: \n"
  printf "=    source $PREFIX/rapd.cshrc \n"
  printf "=  You may want to add this line to your .cshrc file. \n"
  printf "=====================================================================\n"

fi

cd $INSTALL_DIR
printf "\n\033[92mRAPD installation is complete\033[0m\n\n"
exit 0
