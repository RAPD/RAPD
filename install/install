#!/bin/bash

# This file is part of RAPD

# Copyright (C) 2016-2017, Cornell University
# All rights reserved.

# RAPD is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3.

# RAPD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

__created__="2017-02-09"
__maintainer__="Frank Murphy"
__email__="fmurphy@anl.gov"
__status__="Development"

THIS_DIR=$(cd $(dirname $0); pwd)
THIS_FILE=$(basename $0)
SRC_DIR=$THIS_DIR"/sources"
# ROOT_DIR=$(cd $THIS_DIR/..; pwd)
PREFIX=`echo $THIS_DIR | sed -e "s%/install%%"`
RAPD_VERSION=$(grep RAPD_VERSION $THIS_DIR/../src/version.py | cut -d'"' -f2)

BATCH=0
SKIP=0
FORCE=0
OVERWRITE=0
INSTALL_CCTBX=1
INSTALL_SCRIPTS=1
INSTALL_INIT=1
INSTALL_PYTHON=1
PLATFORM=$(uname -s)

# Handle command line
while getopts "bcfhimosty" x; do
    case "$x" in
        h)
            echo "usage: $0 [options]

Installs RAPD v$RAPD_VERSION

    -b           batch mode
    -c           cleanup
    -f           no error if install prefix already exists
    -h           print this help message and exit
    -m           skip installed modules query
    -o           overwrite cctbx

    Install or reinstall
    -t           cctbx
    -i           initialization scripts
    -y           RAPD python
    -s           scripts

"
            exit 2
            ;;
        b)
            BATCH=1
            ;;
        m)
            SKIP=1
            ;;
        f)
            FORCE=1
            ;;
        o)
            OVERWRITE=1
            ;;
        # Clean up the source directories
        c)
            printf "Cleaning up!\n"
            cd sources
            rm -rf phenix/phenix*
            printf "Finished.\n"
            exit 0
            ;;
        t)
            INSTALL_CCTBX=1
            INSTALL_INIT=0
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=0
            ;;
        i)
            INSTALL_CCTBX=0
            INSTALL_INIT=1
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=0
            ;;
        y)
            INSTALL_CCTBX=0
            INSTALL_INIT=0
            INSTALL_PYTHON=1
            INSTALL_SCRIPTS=0
            ;;
        s)
            INSTALL_CCTBX=0
            INSTALL_INIT=0
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=1
            ;;
        ?)
            printf "\033[91mError: did not recognize option, please try -h\033[0m\n"
            exit 1
            ;;
    esac
done

# First test for installed modules
if [[ $PLATFORM == "Linux" ]]; then

  # ROOT user?
  USER=$(whoami)
  if [[ $USER == "root" ]]; then
    printf "\033[91mInstalling as root not supported! Sorry.\033[0m\n\n"
    exit 1
  fi

  # Cent OS
  if [ -f /etc/centos-release ]; then

    LINUX_FLAVOR="CentOS"
    CENTOS_VERSION_MAJOR=`cat /etc/centos-release | cut -d" " -f4 | cut -d "." -f1`

    if [ $CENTOS_VERSION_MAJOR == "6" ]; then
      MODULES_LIST="wget subversion git make bzip2 openssl-devel gcc-c++ mesa-libGL-devel mesa-libGLU-devel patch"
    elif [ $CENTOS_VERSION_MAJOR == "7" ]; then
      MODULES_LIST="gcc-c++ make bzip2 wget subversion git ncurses-devel openssl-devel libffi-devel mesa-libGL-devel mesa-libGLU-devel readline patch python bzip2-devel"
    fi

    function isinstalled {
      if yum list installed "$@" >/dev/null 2>&1; then
        true
      else
        false
      fi
    }
    printf "\033[94mChecking installed packages required for $LINUX_FLAVOR $CENTOS_VERSION_MAJOR \033[0m\n"

    error=0
    missing_packages=""
    for package in `echo $MODULES_LIST`
    do
      if isinstalled $package; then
        echo "  $package installed";
      else
        echo "  $package not installed";
        missing_packages="$missing_packages $package"
        error=1
      fi
    done
    if [ $error == 1 ]; then
      printf "\033[91mERROR: missing package[s]!\033[0m\n"
      printf "The following packages need to be installed: $missing_packages \n"
      if [ $SKIP == 0 ]; then
        printf "Use the -s option to bypass this\n"
        exit 1
      fi
    fi

  # Ubuntu
  elif [ -f /etc/lsb-release ]; then

    OS=$(awk '/DISTRIB_ID=/' /etc/*-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')

    if [[ $OS == "ubuntu" ]]; then

      LINUX_FLAVOR="Ubuntu"

      printf "\033[94mChecking installed packages required for $LINUX_FLAVOR \033[0m\n"

      MODULES_LIST="wget subversion git bzip2 libncurses5-dev zlib1g-dev libssl-dev pkg-config python build-essential libgl1-mesa-dev libglu1-mesa-dev"

      function isinstalled {
        dpkg -l "$@" > /dev/null 2>&1
        INSTALLED=$?
        if [ $INSTALLED == '0' ]; then
          true
        else
          false
        fi
      }

      for package in `echo $MODULES_LIST`
      do
        if isinstalled $package; then
          echo "  $package installed";
        else
          echo "  $package not installed";
          missing_packages="$missing_packages $package"
          error=1
        fi
      done
      if [[ $error == 1 ]]; then
        printf "\033[91mERROR: missing package[s]!\033[0m\n"
        printf "The following packages need to be installed: $missing_packages \n"
        if [ $SKIP == 0 ]; then
          printf "Use the -s option to bypass this\n"
          exit 1
        fi
      fi
    fi
  fi

elif [[ $PLATFORM == "Darwin" ]]; then
  printf "\033[94mPerforming installation on Mac OS \033[0m\n"
fi

if [[ $BATCH == 0 ]] # interactive mode
then
  printf "
Welcome to RAPD2

RAPD2 will be installed into this location:
$PREFIX
  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation

[$PREFIX] >>> "
  read user_prefix
  if [[ $user_prefix != "" ]]; then
    exit 9
#      case "$user_prefix" in
#          *\ * )
#              echo "ERROR: Cannot install into directories with spaces" >&2
#              exit 1
#              ;;
#          *)
#              eval PREFIX="$user_prefix"
#              ;;
#      esac
  fi
fi # ! BATCH

# Check for directory already existing
if [[ ($FORCE == 0) && (-e $PREFIX/share) ]]; then
  printf "\033[91mERROR: It appears installation has already been performed in the directory: $PREFIX\n" >&2
  printf "Use -f option to override\033[0m\n" >&2
  exit 1
fi

# Make the target directory
# echo $ROOT_DIR
# echo $PREFIX
# exit 0

## Installing into directory not the currently cloned tree?
#if [ ! -e $PREFIX ]; then
#  mkdir -p $PREFIX
#  if (( $? )); then
#      echo "ERROR: Could not create directory: $PREFIX" >&2
#      exit 1
#  fi
#fi
#PREFIX=$(cd $PREFIX; pwd)

## Install the rapd src tree
#if [[ $ROOT_DIR != $PREFIX ]]; then
#  rsync -a $ROOT_DIR/* $PREFIX/.
#fi

if [ $INSTALL_CCTBX == 1 ]; then

  printf "$PREFIX/share/cctbx"

  if [[ ( -e $PREFIX/share/cctbx ) && ( OVERWRITE == 0 ) ]]; then
    printf "\n\033[94mIt appears cctbx is already installed for RAPD - skipping\033[0m\n"
  else
    printf "\n\033[94mInstalling cctbx \033[0m\n"

    CCTBX_PREFIX_TGT=$PREFIX"/share/cctbx"
    rm -rf $CCTBX_PREFIX_TGT
    mkdir -p $CCTBX_PREFIX_TGT
    cd $CCTBX_PREFIX_TGT

    # Get the bootstrap installer
    # cp $SRC_DIR/cctbx/bootstrap.py .
    printf "  Downloading CCTBX bootstrap script"
    wget --no-check-certificate https://raw.githubusercontent.com/cctbx/cctbx_project/master/libtbx/auto_build/bootstrap.py

    # Install CCTBX
    printf "  Installing CCTBX"
    python bootstrap.py --builder=cctbx --enable-shared
    # python bootstrap.py --builder=cctbx --nproc=4 --enable-shared

    if [ ! $? -eq 0 ]
    then
      echo "Could not install cctbx" >&2
      exit 1
    fi

    # Correct CCTBX to handle Eiger CBFs
    printf "  Adding Eiger CBFs to CCTBX"
    RAPD_HOME=$PREFIX
    export RAPD_HOME
    cd $THIS_DIR
    ./eigerize_cctbx.sh $CCTBX_PREFIX_TGT

  fi

  printf "\033[92mCCTBX install complete.\033[0m\n"
fi

if [ $INSTALL_INIT == 1 ]; then
  printf "\n\033[94mInstalling initialization scripts \033[0m\n"

  # Create the rapd.shrc script
  BINDIR=$PREFIX"/bin"
  printf "  Creating rapd.shrc\n"
  cd $PREFIX
  if [[ -e $PREFIX"/rapd.shrc" ]]; then
    rm $PREFIX"/rapd.shrc"
  fi
  echo "# $PREFIX/rapd.shrc -- bash initialization script for RAPD2" > rapd.shrc
  echo "#" >> rapd.shrc
  echo "# (c) Copyright 2009-2017, Cornell University" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "# THIS IS AN AUTOMATICALLY GENERATED FILE." > rapd.shrc
  echo "# DO NOT EDIT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING." >> rapd.shrc
  echo "" >> rapd.shrc
  echo "# Setup paths for cctbx" >> rapd.shrc
  echo "source $PREFIX/share/cctbx/build/setpaths.sh" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "# Add rapd bin to the path" >> rapd.shrc
  echo "PATH=$BINDIR:\$PATH" >> rapd.shrc
  echo "export PATH" >> rapd.shrc
  echo "# Set environmental variable" >> rapd.shrc
  echo "RAPD_HOME=$PREFIX" >> rapd.shrc
  echo "export RAPD_HOME" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.shrc
  echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo''" >> rapd.shrc

  # Create the rapd.shrc script
  printf "  Creating rapd.cshrc\n"
  cd $PREFIX
  if [[ -e $PREFIX"/rapd.cshrc" ]]; then
    rm $PREFIX"/rapd.cshrc"
  fi
  echo "# $PREFIX/rapd.cshrc -- bash initialization script for RAPD2" > rapd.cshrc
  echo "#" >> rapd.cshrc
  echo "# (c) Copyright 2009-2017, Cornell University" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "# THIS IS AN AUTOMATICALLY GENERATED FILE." > rapd.cshrc
  echo "# DO NOT EDIT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING." >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "# Setup paths for cctbx" >> rapd.cshrc
  echo "source $PREFIX/share/cctbx/build/setpaths.csh" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "# Add rapd bin to the path" >> rapd.cshrc
  echo "setenv PATH $BINDIR:\$PATH" >> rapd.cshrc
  echo "# Set environmental variable" >> rapd.cshrc
  echo "setenv RAPD_HOME $PREFIX" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.cshrc
  echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo''" >> rapd.cshrc

  printf "\033[92mRAPD initialization scripts install complete.\033[0m\n"
fi

if [ $INSTALL_PYTHON == 1 ]; then
  printf "\n\033[94mInstalling rapd.python \033[0m\n"

  # Create the bin directory
  BINDIR=$PREFIX"/bin"
  if [ ! -d $BINDIR ]; then
    mkdir $BINDIR
  fi

  # Create a script for calling rapd.python
  SAFE_PREFIX=$(echo "$PREFIX" | sed -e 's/\//\\\//g')

  cd $BINDIR
  printf "  Creating rapd.python\n"
   sed -e 's/LIBTBX_DISPATCHER_NAME="cctbx.python"/LIBTBX_DISPATCHER_NAME="rapd.python"/' \
       -e "s/LIBTBX_BUILD=.*/LIBTBX_BUILD=$SAFE_PREFIX\/share\/cctbx\/build/" \
       -e "s%  PYTHONPATH\=\"\$LIBTBX_BUILD%  PYTHONPATH\=\"$SAFE_PREFIX\/src\:\$LIBTBX_BUILD%" \
       $PREFIX/share/cctbx/build/bin/cctbx.python > ./rapd.python
  chmod +x ./rapd.python

  export PYTHONPATH=""
  source $PREFIX/rapd.shrc > /dev/null
  cd $SRC_DIR/python

  printf "  Installing pip"

  # Remove pip if there
  if [[ $PLATFORM == "Darwin" ]]; then
    rm $PREFIX/share/cctbx/build/bin/cctbx.pip > /dev/null
    rm $PREFIX/bin/rapd.pip > /dev/null
    rm $PREFIX/share/cctbx/base/Python.framework/Versions/2.7/bin/pip > /dev/null
  elif [[ $PLATFORM == "Linux" ]]; then
    rm $PREFIX/share/cctbx/build/bin/cctbx.pip > /dev/null
    rm $PREFIX/bin/rapd.pip > /dev/null
    rm $PREFIX/share/cctbx/base/bin/pip > /dev/null
  fi

  # Install pip
  rapd.python get-pip.py --force-reinstall

  # Make useful links
  if [[ $PLATFORM == "Darwin" ]]; then
    ln -s  $PREFIX/share/cctbx/base/Python.framework/Versions/2.7/bin/pip $PREFIX/share/cctbx/build/bin/cctbx.pip
    ln -s  $PREFIX/share/cctbx/base/Python.framework/Versions/2.7/bin/pip $PREFIX/bin/rapd.pip
  elif [[ $PLATFORM == "Linux" ]]; then
    ln -s  $PREFIX/share/cctbx/base/bin/pip $PREFIX/share/cctbx/build/bin/cctbx.pip
    ln -s  $PREFIX/share/cctbx/base/bin/pip $PREFIX/bin/rapd.pip
  fi

  # Modules
  printf "  Installing python modules needed by RAPD"
  
  # Allow Python to use TLS1.2
  rapd.pip install 'requests[security]'
  
  rapd.pip install crypto
  if [[ $PLATFORM == "Darwin" ]]; then
    rapd.pip install pyopenssl
  fi
  rapd.pip install pycrypto
  rapd.pip install ndg-httpsclient #includes pyopenssl, cffi, and cryptography
  rapd.pip install pyasn1
  rapd.pip install redis
  rapd.pip install pymysql
  rapd.pip install pymongo
  rapd.pip install drmaa
  rapd.pip install paramiko
  rapd.pip install fabio
  rapd.pip install scipy
  # Get the up arrow working in the CLI
  if [[ $PLATFORM == "Linux" ]]; then
    if [[ $LINUX_FLAVOR == "CentOS" ]]; then
      if [[ $CENTOS_VERSION_MAJOR == "7" ]]; then
        if [ ! -e /lib64/libncurses.so ]; then
          if [ "$EUID" -ne 0 ]; then
            printf "\033[31mreadline python module needs /lib64/libncurses.so\n \033[0m"
            printf "\033[31mYou can enable readline with the following commands\n\033[0m"
            printf "  > ln -s /lib64/libncurses.so.5 /lib64/libncurses.so\n"
            printf "  > rapd.pip install readline\n"
          else
            printf "  Making libncurses softlink to enable readline"
            ln -s /lib64/libncurses.so.5 /lib64/libncurses.so
            rapd.pip install readline
          fi
        else
          rapd.pip install readline
        fi
      else
        rapd.pip install readline
      fi
    else
      rapd.pip install readline
    fi
  else
    rapd.pip install readline
  fi

  printf "\033[92mRAPD python install complete.\033[0m\n"
fi

if [ $INSTALL_SCRIPTS == 1 ]; then
  printf "\n\033[94mInstalling RAPD executable scripts\033[0m\n"

  # Create the bin directory
  BINDIR=$PREFIX"/bin"
  if [ ! -d $BINDIR ]
  then
    mkdir $BINDIR
  fi

  # Create scripts
  RAPD_HOME=$PREFIX
  export RAPD_HOME
  cd $THIS_DIR
  ./create_min_scripts.sh
  ./create_scripts.sh

  printf "\033[92mRAPD executable scripts install complete.\033[0m\n"
fi



if [ $INSTALL_INIT == 1 ]; then

  printf "\n=====================================================================\n"
  printf "=  To initialize RAPD \n"
  printf "= \n"
  printf "=  sh and bash users: \n"
  printf "=    source $PREFIX/rapd.shrc \n"
  printf "=  You may want to add this line to your .profile or .bashrc file \n"
  printf "= \n"
  printf "=  csh and tcsh users: \n"
  printf "=    source $PREFIX/rapd.cshrc \n"
  printf "=  You may want to add this line to your .cshrc file. \n"
  printf "=====================================================================\n"

fi

printf "\n\033[92mRAPD installation is complete\033[0m\n\n"

exit 0
