#!/bin/bash

# This file is part of RAPD

# Copyright (C) 2016-2017, Cornell University
# All rights reserved.

# RAPD is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3.

# RAPD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

__created__="2016-01-10"
__maintainer__="Jon Schuermann"
__email__="schuerjp@anl.gov"
__status__="Development"

THIS_DIR=$(cd $(dirname $0); pwd)
THIS_FILE=$(basename $0)
SRC_DIR=$THIS_DIR"/sources"
PREFIX=`echo $THIS_DIR | sed -e "s%/install%%"`
RAPD_VERSION=$(grep RAPD_VERSION $THIS_DIR/../src/version.py | cut -d'"' -f2)

BATCH=0
SKIP=0
FORCE=0
OVERWRITE=0
PLATFORM=$(uname -s)
INSTALL_CCTBX=1
PHENIX_VERSION="1.11.1-2575"
PHENIX_INSTALLER_DIR=""

# Handle command line
while getopts "bfshcvop:" x; do
    case "$x" in
        h)
            echo "usage: $0 [options]

Installs RAPD v$RAPD_VERSION

    -f           no error if install prefix already exists
    -s           skip module installation
    -b           batch mode
    -h           print this help message and exit
    -p PREFIX    install prefix, defaults to $PREFIX
    -o           overwrite cctbx
    -c           cleanup
"
            exit 2
            ;;
        b)
            BATCH=1
            ;;
        s)
            SKIP=1
            ;;
        f)
            FORCE=1
            ;;
        p)
            PREFIX="$OPTARG"
            ;;
        o)
            OVERWRITE=1
            ;;
        # Clean up the source directories
        c)
            printf "Cleaning up!\n"
            cd sources
            rm -rf phenix/phenix*
            printf "Finished.\n"
            exit 0
            ;;
        ?)
            printf "\033[91mError: did not recognize option, please try -h\033[0m\n"
            exit 1
            ;;
    esac
done

# First test for installed modules
# if [[ $PLATFORM == "Linux" ]]; then
#
#   printf "\033[94mChecking installed packages\033[0m\n"
#
#   function isinstalled {
#     if yum list installed "$@" >/dev/null 2>&1; then
#       true
#     else
#       false
#     fi
#   }
#
#   error=0
#   missing_packages=""
#   for package in epel-release blas-devel lapack-devel atlas-sse3-devel atlas-devel openblas-devel libffi-devel ImageMagick-devel
#   do
#     if isinstalled $package; then
#       echo "  $package installed";
#     else
#       echo "  $package not installed";
#       missing_packages="$missing_packages $package"
#       error=1
#     fi
#   done
#   if [ $error == 1 ]; then
#     printf "\033[91mERROR: missing package!\033[0m\n"
#     printf "The following packages need to be installed: $missing_packages \n"
#     if [ $SKIP == 0 ]; then
#       printf "Use the -s option to bypass this\n"
#       exit 1
#     fi
#   fi
# elif [[ $PLATFORM == "Linux" ]]; then
#   printf "\033[94mPerforming installation on Mac OS \033[0m\n"
# fi

if [[ $BATCH == 0 ]] # interactive mode
then
  printf "
Welcome to RAPD2

RAPD2 will be installed into this location:
$PREFIX
  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation
  - Or specify a different location below

[$PREFIX] >>> "
  read user_prefix
  if [[ $user_prefix != "" ]]; then
      case "$user_prefix" in
          *\ * )
              echo "ERROR: Cannot install into directories with spaces" >&2
              exit 1
              ;;
          *)
              eval PREFIX="$user_prefix"
              ;;
      esac
  fi
  CONDATAG="-c"
else
  CONDATAG="-yc"
fi # ! BATCH

# Check for directory already existing
if [[ ($FORCE == 0) && (-e $PREFIX/share ) ]]; then
    printf "\033[91mERROR: It appears installation has already been performed in the directory: $PREFIX\n" >&2
    printf "Use -f option to override\033[0m\n" >&2
    exit 1
fi

# Make the new directory
mkdir -p $PREFIX
if (( $? )); then
    echo "ERROR: Could not create directory: $PREFIX" >&2
    exit 1
fi
PREFIX=$(cd $PREFIX; pwd)

# If installing in non-source directory, copy over src directory
if [ $THIS_DIR != $PREFIX/install ]; then
  printf "\n\033[94mCopying src files\033[0m\n"
  rsync -a --exclude "*.tar*" ../src $PREFIX/.
fi

if [ $INSTALL_CCTBX == 1 ]; then

  printf "$PREFIX/share/cctbx"

  if [[ ( -e $PREFIX/share/cctbx ) && ( OVERWRITE == 0 ) ]]; then
    printf "\n\033[94mIt appears cctbx is already installed for RAPD - skipping\033[0m\n"
  else
    printf "\n\033[94mInstalling cctbx \033[0m\n"

    # CCTBX_PREFIX_SRC=$SRC_DIR"/cctbx"
    CCTBX_PREFIX_TGT=$PREFIX"/share/cctbx"
    mkdir $CCTBX_PREFIX_TGT
    cd $CCTBX_PREFIX_TGT

    # Get the bootstrap installer
    wget https://raw.githubusercontent.com/cctbx/cctbx_project/master/libtbx/auto_build/bootstrap.py

    # Install CCTBX
    python bootstrap.py --builder=cctbx
  fi
fi

# Set up rapd
# Create the bin directory
BINDIR=$PREFIX"/bin"
if [ ! -d $BINDIR ]
then
  mkdir $BINDIR
fi

printf "\n\033[94mInstalling rapd executables\033[0m\n"

# Create a script for calling rapd.python
SAFE_PREFIX=$(echo "$PREFIX" | sed -e 's/\//\\\//g')

cd $BINDIR
printf "rapd.python\n"
 sed -e 's/LIBTBX_DISPATCHER_NAME="cctbx.python"/LIBTBX_DISPATCHER_NAME="rapd.python"/' \
     -e "s/LIBTBX_BUILD=.*/LIBTBX_BUILD=$SAFE_PREFIX\/share\/cctbx\/build/" \
     -e "s%  PYTHONPATH\=\"\$LIBTBX_BUILD%  PYTHONPATH\=\"$SAFE_PREFIX\/src\:\$LIBTBX_BUILD%" \
     $PREFIX/share/cctbx/build/bin/cctbx.python > ./rapd.python
chmod +x ./rapd.python

# Create scripts
RAPD_HOME=$PREFIX
export RAPD_HOME
cd $THIS_DIR
./create_min_scripts.sh
./create_scripts.sh

# Create the rapd.shrc script
printf "Writing rapd.shrc\n"
cd $PREFIX
echo "# $PREFIX/rapd.shrc -- bash initialization script for RAPD2" > rapd.shrc
echo "#" >> rapd.shrc
echo "# (c) Copyright 2009-2017, Cornell University" >> rapd.shrc
echo "" >> rapd.shrc
echo "# THIS IS AN AUTOMATICALLY GENERATED FILE." > rapd.shrc
echo "# DO NOT EDIT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING." >> rapd.shrc
echo "" >> rapd.shrc
echo "# Setup paths for cctbx" >> rapd.shrc
echo "source $PREFIX/share/cctbx/build/setpaths.sh" >> rapd.shrc
echo "" >> rapd.shrc
echo "# Add rapd bin to the path" >> rapd.shrc
echo "PATH=$BINDIR:\$PATH" >> rapd.shrc
echo "export PATH" >> rapd.shrc
echo "# Set environmental variable"
echo "RAPD_HOME=$PREFIX" >> rapd.shrc
echo "export RAPD_HOME" >> rapd.shrc
echo "" >> rapd.shrc
echo "echo '==================================================='" >> rapd.shrc
echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.shrc
echo "echo '==================================================='" >> rapd.shrc
echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.shrc
echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.shrc
echo "echo '==================================================='" >> rapd.shrc
echo "echo''" >> rapd.shrc

# Create the rapd.shrc script
printf "Wrting rapd.cshrc\n"
cd $PREFIX
echo "# $PREFIX/rapd.cshrc -- bash initialization script for RAPD2" > rapd.cshrc
echo "#" >> rapd.cshrc
echo "# (c) Copyright 2009-2017, Cornell University" >> rapd.cshrc
echo "" >> rapd.cshrc
echo "# THIS IS AN AUTOMATICALLY GENERATED FILE." > rapd.cshrc
echo "# DO NOT EDIT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING." >> rapd.cshrc
echo "" >> rapd.cshrc
echo "# Setup paths for cctbx" >> rapd.cshrc
echo "source $PREFIX/share/cctbx/build/setpaths.csh" >> rapd.cshrc
echo "" >> rapd.cshrc
echo "# Add rapd bin to the path" >> rapd.cshrc
echo "setenv PATH $BINDIR:\$PATH" >> rapd.cshrc
echo "# Set environmental variable"
echo "setenv RAPD_HOME $PREFIX" >> rapd.cshrc
echo "" >> rapd.cshrc
echo "echo '==================================================='" >> rapd.cshrc
echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.cshrc
echo "echo '==================================================='" >> rapd.cshrc
echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.cshrc
echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.cshrc
echo "echo '==================================================='" >> rapd.cshrc
echo "echo''" >> rapd.cshrc


printf "\n\033[94mInstalling Python modules\033[0m\n"
echo $PYTHONPATH
export PYTHONPATH=""
source $PREFIX/rapd.shrc
cd $SRC_DIR/python

# Install pip
rapd.python get-pip.py
if [[ $PLATFORM == "Darwin" ]]; then

  ln -s  $PREFIX/share/cctbx/base/Python.framework/Versions/2.7/bin/pip $PREFIX/share/cctbx/build/bin/cctbx.pip
  ln -s  $PREFIX/share/cctbx/base/Python.framework/Versions/2.7/bin/pip $PREFIX/bin/rapd.pip

elif [[ $PLATFORM == "Linux" ]]; then

  ln -s  $PREFIX/share/cctbx/base/bin/pip $PREFIX/share/cctbx/build/bin/cctbx.pip
  ln -s  $PREFIX/share/cctbx/base/bin/pip $PREFIX/bin/rapd.pip

fi

# Modules
echo $PYTHONPATH
rapd.pip install crypto
if [[ $PLATFORM == "Darwin" ]]; then
  rapd.pip install pyopenssl
fi
rapd.pip install pycrypto
rapd.pip install ndg-httpsclient #includes pyopenssl, cffi, and cryptography
rapd.pip install pyasn1
rapd.pip install redis
rapd.pip install pymysql
rapd.pip install pymongo
rapd.pip install drmaa
rapd.pip install paramiko
rapd.pip install fabio
rapd.pip install hcluster

printf "\033[92mPython modules install complete.\033[0m\n\n"



printf "\033[92mRAPD installation is complete\033[0m\n\n"

printf "=====================================================================\n"
printf "=  INITIALIZING RAPD \n"
printf "= \n"
printf "=  sh and bash users: \n"
printf "=    source $PREFIX/rapd.shrc \n"
printf "=  You may want to add this line to your .profile or .bashrc file \n"
printf "= \n"
printf "=  csh and tcsh users: \n"
printf "=    source $PREFIX/rapd.cshrc \n"
printf "=  You may want to add this line to your .cshrc file. \n"
printf "=====================================================================\n"

exit 0
