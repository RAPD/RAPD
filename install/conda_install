#!/bin/bash

# This file is part of RAPD

# Copyright (C) 2016-2021, Cornell University
# All rights reserved.

# RAPD is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3.

# RAPD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

__created__="2021-03-19"
__maintainer__="Frank Murphy"
__email__="fmurphy@anl.gov"
__status__="Development"

THIS_DIR=$(cd $(dirname $0); pwd)
THIS_FILE=$(basename $0)
SRC_DIR=$THIS_DIR"/sources"
PREFIX=`echo $THIS_DIR | sed -e "s%/install%%"`
RAPD_VERSION=$(grep RAPD_VERSION $THIS_DIR/../src/version.py | cut -d'"' -f2)

BATCH=0
SKIP=0
FORCE=0
OVERWRITE=0
INSSTALL_CONDA=1
INSTALL_CCTBX=1
INSTALL_SCRIPTS=1
INSTALL_INIT=1
INSTALL_PYTHON=1
PLATFORM=$(uname -s)
NPROC=-1

# Handle command line
while getopts "abcfhimostyn:" x; do
    case "$x" in
        h)
            echo "usage: $0 [options]

Installs RAPD v$RAPD_VERSION

    -b           batch mode
    -c           cleanup
    -f           no error if install prefix already exists
    -h           print this help message and exit
    -m           skip installed modules query
    -n:#         number of processors to use
    -o           overwrite cctbx

    Install or reinstall
    -a           anaconda
    -t           cctbx
    -i           initialization scripts
    -y           RAPD python
    -s           scripts

"
            exit 2
            ;;
        b)
            BATCH=1
            ;;
        m)
            SKIP=1
            ;;
        f)
            FORCE=1
            ;;
        o)
            OVERWRITE=1
            ;;

        n)
            NPROC=$OPTARG
            ;;

        # Clean up the source directories
        c)
            printf "Cleaning up!\n"
            cd sources
            rm -rf phenix/phenix*
            printf "Finished.\n"
            exit 0
            ;;
        a)
            INSTALL_CONDA=1
            INSTALL_CCTBX=0
            INSTALL_INIT=0
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=0
            ;;
        t)
            INSTALL_CONDA=0
            INSTALL_CCTBX=1
            INSTALL_INIT=0
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=0
            ;;
        i)
            INSTALL_CONDA=0
            INSTALL_CCTBX=0
            INSTALL_INIT=1
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=0
            ;;
        y)
            INSTALL_CONDA=0
            INSTALL_CCTBX=0
            INSTALL_INIT=0
            INSTALL_PYTHON=1
            INSTALL_SCRIPTS=0
            ;;
        s)
            INSTALL_CONDA=0
            INSTALL_CCTBX=0
            INSTALL_INIT=0
            INSTALL_PYTHON=0
            INSTALL_SCRIPTS=1
            ;;
        ?)
            printf "\033[91mError: did not recognize option, please try -h\033[0m\n"
            exit 1
            ;;
    esac
done

# First test for installed modules
if [[ $PLATFORM == "Linux" ]]; then

  if [[ $NPROC == -1 ]]; then
    NPROC=$(grep -c ^processor /proc/cpuinfo)
  fi

  # ROOT user?
  USER=$(whoami)
  if [[ $USER == "root" ]]; then
    printf "\033[91mInstalling as root not supported! Sorry.\033[0m\n\n"
    exit 1
  fi

  # Cent OS
  if [ -f /etc/centos-release ]; then

    LINUX_FLAVOR="CentOS"
    CENTOS_VERSION_MAJOR=`cat /etc/centos-release | cut -d" " -f4 | cut -d "." -f1`

    if [ $CENTOS_VERSION_MAJOR == "6" ]; then
      MODULES_LIST="wget subversion git make bzip2 openssl-devel gcc-c++ mesa-libGL-devel mesa-libGLU-devel patch"
    elif [ $CENTOS_VERSION_MAJOR == "7" ]; then
      MODULES_LIST="gcc-c++ make bzip2 bzip2-devel wget subversion git ncurses-devel openssl-devel libffi-devel mesa-libGL-devel mesa-libGLU-devel readline patch python bzip2-devel"
    fi

    function isinstalled {
      if yum list installed "$@" >/dev/null 2>&1; then
        true
      else
        false
      fi
    }
    printf "\033[94mChecking installed packages required for $LINUX_FLAVOR $CENTOS_VERSION_MAJOR \033[0m\n"

    error=0
    missing_packages=""
    for package in `echo $MODULES_LIST`
    do
      if isinstalled $package; then
        echo "  $package installed";
      else
        echo "  $package not installed";
        missing_packages="$missing_packages $package"
        error=1
      fi
    done
    if [ $error == 1 ]; then
      printf "\033[91mERROR: missing package[s]!\033[0m\n"
      printf "The following packages need to be installed: $missing_packages \n"
      if [ $SKIP == 0 ]; then
        printf "Use the -s option to bypass this\n"
        exit 1
      fi
    fi

  # Ubuntu
  elif [ -f /etc/lsb-release ]; then

    OS=$(awk '/DISTRIB_ID=/' /etc/*-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')

    if [[ $OS == "ubuntu" ]]; then

      LINUX_FLAVOR="Ubuntu"

      printf "\033[94mChecking installed packages required for $LINUX_FLAVOR \033[0m\n"

      MODULES_LIST="wget subversion git bzip2 libncurses5-dev zlib1g-dev libssl-dev pkg-config python build-essential libgl1-mesa-dev libglu1-mesa-dev"

      function isinstalled {
        dpkg -l "$@" > /dev/null 2>&1
        INSTALLED=$?
        if [ $INSTALLED == '0' ]; then
          true
        else
          false
        fi
      }

      for package in `echo $MODULES_LIST`
      do
        if isinstalled $package; then
          echo "  $package installed";
        else
          echo "  $package not installed";
          missing_packages="$missing_packages $package"
          error=1
        fi
      done
      if [[ $error == 1 ]]; then
        printf "\033[91mERROR: missing package[s]!\033[0m\n"
        printf "The following packages need to be installed: $missing_packages \n"
        if [ $SKIP == 0 ]; then
          printf "Use the -s option to bypass this\n"
          exit 1
        fi
      fi
    fi
  fi

elif [[ $PLATFORM == "Darwin" ]]; then
  printf "\033[94mPerforming installation on Mac OS \033[0m\n"

  if [[ $NPROC == -1 ]]; then
    NPROC=$(sysctl -n hw.ncpu)
  fi
fi

# Determine shell
LOGIN_SHELL=$(echo $SHELL | awk -F/ '{print $1}')
echo $SHELL $LOGIN_SHELL
exit 1

if [[ $BATCH == 0 ]] # interactive mode
then
  printf "
Welcome to RAPD2

RAPD2 will be installed into this location:
$PREFIX
  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation

[$PREFIX] >>> "
  read user_prefix
  if [[ $user_prefix != "" ]]; then
    exit 9
  fi
fi # ! BATCH

# Check for directory already existing
if [[ ($FORCE == 0) && (-e $PREFIX/share) ]]; then
  printf "\033[91mERROR: It appears installation has already been performed in the directory: $PREFIX\n" >&2
  printf "Use -f option to override\033[0m\n" >&2
  exit 1
fi

if [ $INSTALL_CONDA == 1 ]; then

  printf "\n\033[94mInstalling conda \033[0m\n"

  # Checking for conda
  # INSTALLED_CONDA=$(which conda)
  # if [ "$INSTALLED_CONDA" != "" ]; then
  #   printf "\033[91mError: conda appears to already be installed\033[0m\n"
  #   printf "\033[92mconda install skipped\033[0m\n"
  # else

    printf "  Downloading conda intaller\n"
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
    HASH="a9ea0afba55b5d872e01323d495b649eac8ff4ce2ea098fb4c357b6139fe6478"
    new_hash=$(shasum -a 256 miniconda.sh | awk '{print $1}')
    if [ "$new_hash" != "$HASH" ]; then
      printf "\033[91mError: conda installer hash does not match expected value\033[0m\n"
      exit 1
    fi

    printf "  Installing conda\n"
    printf "When finishing, installer will prompt: \"Do you wish the installer to initialize Miniconda3 by running conda init?\". Please enter \"yes\""
    sleep 5
    if [ $BATCH == 1 ]; then
      bash ./miniconda.sh -b -p $HOME/miniconda
    else
      bash ./miniconda.sh
    fi

    printf "\033[92mconda install complete.\033[0m\n"
  # fi
fi


if [ $INSTALL_CCTBX == 1 ]; then

  # Checking for conda
  INSTALLED_CONDA=$(which conda)
  if [ "$INSTALLED_CONDA" == "" ]; then
    printf "\033[91mError: No conda found\033[0m\n"
    exit 1
  fi

  # Looking for cctbx.python
  CCTBX_PYTHON=$(which cctbx.python)
  if [ "$CCTBX_PYTHON" == "" ]; then
    printf "\033[91mError: No cctbx.python found\033[0m\n"
    exit 1
  fi

  if [ -f "$PREFIX/bin/rapd.pip" ];then
    rm $PREFIX/bin/rapd.pip > /dev/null
  fi

  if [[ -e $CCTBX_PYTHON ]]; then
    printf "\n\033[94mIt appears cctbx is already installed - skipping installation\033[0m\n"
  else
    printf "\n\033[94mInstalling cctbx \033[0m\n"



    # Correct CCTBX to handle Eiger CBFs
    # printf "  Adding Eiger CBFs to CCTBX"
    # RAPD_HOME=$PREFIX
    # export RAPD_HOME
    # cd $THIS_DIR
    # ./eigerize_cctbx.sh $CCTBX_PREFIX_TGT

  fi

  printf "\033[92mCCTBX install complete.\033[0m\n"
fi

if [ $INSTALL_INIT == 1 ]; then
  printf "\n\033[94mInstalling initialization scripts \033[0m\n"

  # Look for cctbx.python
  CCTBX_PYTHON=$(which cctbx.python)
  if [ "$CCTBX_PYTHON" == "" ]; then
    printf "\033[91mError: No cctbx.python found\033[0m\n"
    exit 1
  fi

  # Create the rapd.shrc script
  BINDIR=$PREFIX"/bin"
  SAFE_PREFIX=$(echo "$PREFIX" | sed -e 's/\//\\\//g')
  printf "  Creating rapd.shrc\n"
  cd $PREFIX
  if [[ -e $PREFIX"/rapd.shrc" ]]; then
    rm $PREFIX"/rapd.shrc"
  fi
  echo "# $PREFIX/rapd.shrc -- bash initialization script for RAPD2" > rapd.shrc
  echo "#" >> rapd.shrc
  echo "# (c) Copyright 2009-2021, Cornell University" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "# THIS IS AN AUTOMATICALLY GENERATED FILE." > rapd.shrc
  echo "# DO NOT EDIT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING." >> rapd.shrc
  echo "" >> rapd.shrc
  # echo "# Setup paths for cctbx" >> rapd.shrc
  # echo "source $PREFIX/share/cctbx/build/setpaths.sh" >> rapd.shrc
  # echo "" >> rapd.shrc
  echo "# Add rapd bin to the path" >> rapd.shrc
  echo "PATH=$BINDIR:\$PATH" >> rapd.shrc
  echo "export PATH" >> rapd.shrc
  echo "# Add rapd src to pythonpath" >> rapd.shrc
  echo "setenv PYTHONPATH $SAFE_PREFIX\/src\:\$PYTHONPATH" >> rapd.shrc
  echo "# Set environmental variable" >> rapd.shrc
  echo "RAPD_HOME=$PREFIX" >> rapd.shrc
  echo "export RAPD_HOME" >> rapd.shrc
  echo "" >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.shrc
  echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.shrc
  echo "echo '==================================================='" >> rapd.shrc
  echo "echo''" >> rapd.shrc

  # Create the rapd.shrc script
  printf "  Creating rapd.cshrc\n"
  cd $PREFIX
  if [[ -e $PREFIX"/rapd.cshrc" ]]; then
    rm $PREFIX"/rapd.cshrc"
  fi
  echo "# $PREFIX/rapd.cshrc -- bash initialization script for RAPD2" > rapd.cshrc
  echo "#" >> rapd.cshrc
  echo "# (c) Copyright 2009-2021, Cornell University" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "# THIS IS AN AUTOMATICALLY GENERATED FILE." > rapd.cshrc
  echo "# DO NOT EDIT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING." >> rapd.cshrc
  echo "" >> rapd.cshrc
  # echo "# Setup paths for cctbx" >> rapd.cshrc
  # echo "source $PREFIX/share/cctbx/build/setpaths.csh" >> rapd.cshrc
  # echo "" >> rapd.cshrc
  echo "# Add rapd src to pythonpath" >> rapd.cshrc
  echo "setenv PYTHONPATH $SAFE_PREFIX\/src\:\$PYTHONPATH" >> rapd.cshrc
  echo "# Add rapd bin to the path" >> rapd.cshrc
  echo "setenv PATH $BINDIR:\$PATH" >> rapd.cshrc
  echo "# Set environmental variable" >> rapd.cshrc
  echo "setenv RAPD_HOME $PREFIX" >> rapd.cshrc
  echo "" >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo '                    RAPD v$RAPD_VERSION            '" >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo ' Thanks for using RAPD. Please visit RAPD on github'" >> rapd.cshrc
  echo "echo ' at https://github.com/RAPD/rapd  Enjoy.'           " >> rapd.cshrc
  echo "echo '==================================================='" >> rapd.cshrc
  echo "echo''" >> rapd.cshrc

  printf "\033[92mRAPD initialization scripts install complete.\033[0m\n"
fi

if [ $INSTALL_PYTHON == 1 ]; then
  printf "\n\033[94mInstalling rapd.python \033[0m\n"

  # Look for cctbx.python
  CCTBX_PYTHON=$(which cctbx.python)
  if [ "$CCTBX_PYTHON" == "" ]; then
    printf "\033[91mError: No cctbx.python found\033[0m\n"
    exit 1
  fi
  LIBTBX_PREFIX=$(echo $CCTBX_PYTHON | awk '{ print substr( $0, 1, length($0)-17 ) }' | sed -e 's/\//\\\//g')

  # Create the bin directory
  BINDIR=$PREFIX"/bin"
  if [ ! -d $BINDIR ]; then
    mkdir $BINDIR
  fi
  cd $BINDIR

  # Create a script for calling rapd.python
  printf "  Creating rapd.python\n"
    sed -e "s/LIBTBX_PREFIX\=.*/LIBTBX_PREFIX\=$LIBTBX_PREFIX/" \
        -e 's/LIBTBX_DISPATCHER_NAME=.*/LIBTBX_DISPATCHER_NAME="rapd.python"/' \
        $CCTBX_PYTHON > ./rapd.python

  chmod +x ./rapd.python

  # export PYTHONPATH=""
  source $PREFIX/rapd.shrc > /dev/null

  # Remove pip if there
  if [ -f "$PREFIX/bin/rapd.pip" ];then
    rm $PREFIX/bin/rapd.pip > /dev/null
  fi

  # Install pip
  conda install -y pip
  INSTALLED_PIP=$(which pip)
  ln -s  $INSTALLED_PIP $PREFIX/bin/rapd.pip

  # Modules
  printf "  Installing python modules needed by RAPD"
  rapd.pip install crypto
  conda install -y ndg-httpsclient # dependencies: pyasn1, pyopenssl
  conda install -y pycrypto
  conda install -y redis
  conda install -y pymysql         # dependencies: cryptography
  conda install -y pymongo         # dependencies: libcxx
  conda install -y drmaa           
  conda install -y paramiko        # dependencies: bcrypt, cryptography, pynacl
  rapd.pip install fabio
  conda install -y scipy           # dependencies: blas, libcxx, libgfortran, libopenblas, numpy
  rapd.pip install mysolr
  conda install -y readline        # dependencies: ncurses

  printf "\033[92mRAPD python install complete.\033[0m\n"
fi

if [ $INSTALL_SCRIPTS == 1 ]; then
  printf "\n\033[94mInstalling RAPD executable scripts\033[0m\n"

  # Create the bin directory
  BINDIR=$PREFIX"/bin"
  if [ ! -d $BINDIR ]
  then
    mkdir $BINDIR
  fi

  # Create scripts
  RAPD_HOME=$PREFIX
  export RAPD_HOME
  cd $THIS_DIR
  ./create_min_scripts.sh
  ./create_scripts.sh

  printf "\033[92mRAPD executable scripts install complete.\033[0m\n"
fi



if [ $INSTALL_INIT == 1 ]; then

  printf "\n=====================================================================\n"
  printf "=  To initialize RAPD \n"
  printf "= \n"
  printf "=  sh and bash users: \n"
  printf "=    source $PREFIX/rapd.shrc \n"
  printf "=  You may want to add this line to your .profile or .bashrc file \n"
  printf "= \n"
  printf "=  csh and tcsh users: \n"
  printf "=    source $PREFIX/rapd.cshrc \n"
  printf "=  You may want to add this line to your .cshrc file. \n"
  printf "=====================================================================\n"

fi

printf "\n\033[92mRAPD installation is complete\033[0m\n\n"

exit 0
